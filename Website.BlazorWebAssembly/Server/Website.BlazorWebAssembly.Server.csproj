<Project Sdk="Microsoft.NET.Sdk.Web">

	<PropertyGroup>
		<TargetFramework>net7.0</TargetFramework>
		<Nullable>enable</Nullable>
		<ImplicitUsings>enable</ImplicitUsings>
		<UserSecretsId>2c7682da-980e-4948-9745-6c4c2a7ce1aa</UserSecretsId>
		<DockerDefaultTargetOS>Linux</DockerDefaultTargetOS>
		<DockerfileContext>..\..</DockerfileContext>
		<DockerComposeProjectPath>..\..\docker-compose-blazor-webassembly.dcproj</DockerComposeProjectPath>
		<DockerfileTag>website-2203-blazor-webassembly</DockerfileTag>
	</PropertyGroup>

	<ItemGroup>
		<PackageReference Include="Microsoft.AspNetCore.Components.WebAssembly.Server" Version="7.0.0-rc.1.22427.2" />
		<PackageReference Include="Microsoft.VisualStudio.Azure.Containers.Tools.Targets" Version="1.17.0" />
	</ItemGroup>

	<ItemGroup>
		<ProjectReference Include="..\..\Website.ServerLib\Website.ServerLib.csproj" />
		<ProjectReference Include="..\Client\Website.BlazorWebAssembly.Client.csproj" />
	</ItemGroup>

	<Target Name="BuildHashes" AfterTargets="Publish">
		<ItemGroup>
			<FilesToHash Include="$(PublishDir)wwwroot\**\*.js;$(PublishDir)wwwroot\**\*.css;$(PublishDir)wwwroot\**\*.json" />
			<HashFileOutput Include="$(PublishDir)hashes.csv" />
		</ItemGroup>

		<GetFileHash Files="@(FilesToHash)" Algorithm="SHA256" HashEncoding="base64">
			<Output TaskParameter="Items" ItemName="FilesWithHashes" />
		</GetFileHash>

		<Message Importance="High" Text="@(FilesWithHashes->'%(Identity): %(FileHash)')" />

		<WriteLinesToFile File="@(HashFileOutput)" Lines="@(FilesWithHashes->'%(Identity),%(FileHash)')" Overwrite="true" Encoding="Unicode" />
	</Target>

	<PropertyGroup>
		<!--Paths to tools, tasks, and extensions are calculated relative to the BlazorWebAssemblySdkDirectoryRoot.
			But there does not seem to be a property for that, so after much trial and error, using the property 
			ILLinkTasksAssembly seems most reliable as it contains the same value whether the build is run from VS 
			or the command line, unlike many others such as MSBuildSDKsPath.
			If a better property is identified, this can be changed.			
		-->

		<!-- First, we strip the property value back to the root SDKs level and then down into the WebAssembly SDK -->
		<_SDKRoot>$(ILLinkTasksAssembly.Substring(0,$(ILLinkTasksAssembly.LastIndexOf('Microsoft.NET.ILLink.Tasks'))))</_SDKRoot>
		<BlazorWebAssemblySdkDirectoryRoot>$(_SDKRoot)\Microsoft.NET.Sdk.BlazorWebAssembly\</BlazorWebAssemblySdkDirectoryRoot>

		<!-- The next four lines are Copyright (c) .NET Foundation. All rights reserved. -->
		<_BlazorWebAssemblySdkTasksTFM Condition=" '$(MSBuildRuntimeType)' == 'Core'">net7.0</_BlazorWebAssemblySdkTasksTFM>
		<_BlazorWebAssemblySdkTasksTFM Condition=" '$(MSBuildRuntimeType)' != 'Core'">net472</_BlazorWebAssemblySdkTasksTFM>
		<_BlazorWebAssemblySdkTasksAssembly>$(BlazorWebAssemblySdkDirectoryRoot)tools\$(_BlazorWebAssemblySdkTasksTFM)\Microsoft.NET.Sdk.BlazorWebAssembly.Tasks.dll</_BlazorWebAssemblySdkTasksAssembly>
		<_BlazorWebAssemblySdkToolAssembly>$(BlazorWebAssemblySdkDirectoryRoot)tools\net7.0\Microsoft.NET.Sdk.BlazorWebAssembly.Tool.dll</_BlazorWebAssemblySdkToolAssembly>
	</PropertyGroup>
	
	<!-- The next two lines are Copyright (c) .NET Foundation. All rights reserved. -->
	<UsingTask TaskName="Microsoft.NET.Sdk.BlazorWebAssembly.BrotliCompress" AssemblyFile="$(_BlazorWebAssemblySdkTasksAssembly)" />
	<UsingTask TaskName="Microsoft.NET.Sdk.BlazorWebAssembly.GzipCompress" AssemblyFile="$(_BlazorWebAssemblySdkTasksAssembly)" />

	<!--
		Omitted to avoid CRIME and BREACH attacks - https://docs.microsoft.com/en-us/aspnet/core/performance/response-compression?view=aspnetcore-6.0#compression-with-https
		and secondarily no middleware presently serves precompressed assets
	-->
	<Target Name="CustomGZipAndBrotliCompression" AfterTargets="Publish">

		<!--************* THIS IS WHERE YOU CHOOSE WHAT TO COMPRESS *****************
			you probably don't want to change anything else - just this ItemGroup-->

		<ItemGroup>
			<MyStaticFiles Include="$(PublishDir)/wwwroot/**/*.css" />
			<MyStaticFiles Include="$(PublishDir)/wwwroot/**/*.js" />
		</ItemGroup>

		<!--Call the BlazorWebAssembly Task GZipCompress and store the results in MyCompressedFiles-->
		<GZipCompress FilesToCompress="@(MyStaticFiles)" OutputDirectory="$(IntermediateOutputPath)compress\">
			<Output TaskParameter="CompressedFiles" ItemName="MyCompressedFiles" />
		</GZipCompress>

		<!--Call the BlazorWebAssembly Task BrotliCompress and store the results in MyCompressedFiles-->
		<BrotliCompress OutputDirectory="$(IntermediateOutputPath)compress\" FilesToCompress="@(MyStaticFiles)" ToolAssembly="$(_BlazorWebAssemblySdkToolAssembly)" ToolExe="$(_RazorSdkDotNetHostFileName)" ToolPath="$(_RazorSdkDotNetHostDirectory)">
			<Output TaskParameter="CompressedFiles" ItemName="MyCompressedFiles" />
		</BrotliCompress>

		<!--Log out what we have done-->
		<Message Importance="High" Text="======= Brotli/GZip Compression For @(MyCompressedFiles-&gt;Count()) Static Files =======" />
		<Message Importance="High" Text=" Compressed: %(MyCompressedFiles.OriginalItemSpec)%(MyCompressedFiles.Extension)" />

		<!--Rename/move the compressed files back to to the correct place/names as they have "hashed" names at this stage.-->
		<Move SourceFiles="%(MyCompressedFiles.FullPath)" DestinationFiles="%(MyCompressedFiles.OriginalItemSpec)%(MyCompressedFiles.Extension)" />

	</Target>

	<!-- Remove comments to list wwwroot contents to diagnose content inclusion in GitHub Actions -->
	<!--<Target Name="Tests" AfterTargets="CustomGZipAndBrotliCompression">

		<Message Importance="High" Text="===========================================================================" />
		<Message Importance="High" Text="===========================================================================" />
		<Message Importance="High" Text="===========================================================================" />
		<Message Importance="High" Text="====== List contents of wwwroot ===========================================" />
		<Message Importance="High" Text="" />
		<Exec Command="ls -altR $(PublishDir)/wwwroot" ContinueOnError="true" StandardOutputImportance="high" StandardErrorImportance="high" LogStandardErrorAsError="false" IgnoreExitCode="true" />
		<Message Importance="High" Text="===========================================================================" />
		<Message Importance="High" Text="===========================================================================" />
		<Message Importance="High" Text="===========================================================================" />

	</Target>-->

</Project>
