<Project Sdk="Microsoft.NET.Sdk.Razor">

	<PropertyGroup>
		<TargetFramework>net6.0</TargetFramework>
		<ImplicitUsings>enable</ImplicitUsings>
		<Nullable>enable</Nullable>
		<Company>Dioptra Limited</Company>
		<Version>2022-01-01--13-00-00--WIP</Version>
		<RepositoryUrl>https://github.com/Dioptra/Website.2203</RepositoryUrl>
		<PackageLicenseExpression>Commercial</PackageLicenseExpression>
		<PackageReadmeFile>README.md</PackageReadmeFile>
		<PackageReleaseNotes></PackageReleaseNotes>
		<NeutralLanguage>en</NeutralLanguage>
		<Copyright>© Dioptra Limited. All rights reserved.</Copyright>
		<Product>Dioptra Website</Product>
	</PropertyGroup>

	<ItemGroup>
		<AssemblyAttribute Include="Website.Lib.BuildDateAttribute">
			<_Parameter1>$([System.DateTime]::UtcNow.ToString("yyyy-MM-dd"))</_Parameter1>
		</AssemblyAttribute>
	</ItemGroup>

	<ItemGroup>
		<SupportedPlatform Include="browser" />
	</ItemGroup>

	<ItemGroup>
		<PackageReference Include="Blazored.LocalStorage" Version="4.2.0" />
		<PackageReference Include="GoogleAnalytics.Blazor" Version="1.0.0-preview.3" />
		<PackageReference Include="libphonenumber-csharp" Version="8.12.53" />
		<PackageReference Include="Material.Blazor" Version="3.0.0-preview.10" />
		<PackageReference Include="Microsoft.Build" Version="17.2.0" />
	</ItemGroup>

	<ItemGroup>
		<InputImageFiles Include="$(ProjectDir)WebAssets\Images\*.*" />
		<InputPWAFiles Include="$(ProjectDir)WebAssets\PWA\*.*" />
		<InputAndroidInputImageFiles Include="$(ProjectDir)WebAssets\android-images\*.*" />
		<InputIOSInputImageFiles Include="$(ProjectDir)WebAssets\ios-images\*.*" />
		<InputWindows11InputImageFiles Include="$(ProjectDir)WebAssets\windows11-images\*.*" />

		<InputStaticAssetsScripts Include="$(ProjectDir)WebAssets\**\*.ts" />
		<OutputStaticAssetsScripts Include="$(ProjectDir)wwwroot\js\dioptra.js;wwwroot\js\dioptra.min.js" />

		<InputStaticAssetsStyles Include="$(ProjectDir)WebAssets\**\*.scss;" />
		<OutputStaticAssetsStyles Include="$(ProjectDir)wwwroot\css\dioptra.css;wwwroot\css\dioptra.min.css" />
		
		<!-- Temporary fixes until .net7 when dynamically copied content automatically copies to output -->
		<OutputImages Include="$(ProjectDir)wwwroot\**\*.*" />
		<Content Remove="@(OutputImages)" />
		<Content Include="@(OutputImages)" />
		<Content Remove="@(OutputStaticAssetsScripts)" />
		<Content Include="@(OutputStaticAssetsScripts)" />
		<Content Remove="@(OutputStaticAssetsStyles)" />
		<Content Include="@(OutputStaticAssetsStyles)" />
	</ItemGroup>

	<ItemGroup>
		<UpToDateCheckInput Include="@(InputStaticAssetsScripts)" Set="Scripts" />
		<UpToDateCheckOutput Include="@(OutputStaticAssetsScripts)" Set="Scripts" />
		<UpToDateCheckInput Include="@(InputStaticAssetsStyles)" Set="Styles" />
		<UpToDateCheckOutput Include="@(OutputStaticAssetsStyles)" Set="Styles" />
	</ItemGroup>

	<ItemGroup>
		<None Include="tsconfig.json" />
	</ItemGroup>

	<!-- Remove comments once migrated to .net7 and dynamically copied content automatically copies to output -->
	<Target Name="WWWRootFileCopy" BeforeTargets="PreBuildEvent">
		<!--<Copy SourceFiles="@(InputImageFiles)" DestinationFolder="$(ProjectDir)wwwroot/images" />
		<Copy SourceFiles="@(InputPWAFiles)" DestinationFolder="$(ProjectDir)wwwroot/pwa" />
		<Copy SourceFiles="@(InputAndroidInputImageFiles)" DestinationFolder="$(ProjectDir)wwwroot/android-images" />
		<Copy SourceFiles="@(InputIOSInputImageFiles)" DestinationFolder="$(ProjectDir)wwwroot/ios-images" />
		<Copy SourceFiles="@(InputWindows11InputImageFiles)" DestinationFolder="$(ProjectDir)wwwroot/windows11-images" />-->
	</Target>

	<Target Name="CheckIfNpmExists" Inputs="@(InputStaticAssetsScripts);@(InputStaticAssetsStyles)" Outputs="@(OutputStaticAssetsScripts);@(OutputStaticAssetsStyles)" BeforeTargets="PreBuildEvent" AfterTargets="WWWRootFileCopy">
	<!--<Target Name="CheckIfNpmExists" BeforeTargets="PreBuildEvent" AfterTargets="WWWRootFileCopy">-->
		<Message Text="***** npm install" />
		<Exec Command="npm install" ContinueOnError="true" StandardOutputImportance="low" StandardErrorImportance="low" LogStandardErrorAsError="false" IgnoreExitCode="true">
			<Output TaskParameter="ExitCode" PropertyName="NpmReturnCode" />
		</Exec>
		<Message Text="***** 'npm install' return code was $(NpmReturnCode) (0 indicates npm is available)" />
	</Target>

	<Target Name="ErrorOutput" BeforeTargets="PreBuildEvent" AfterTargets="CheckIfNpmExists" Condition=" '$(NpmReturnCode)' != '0' ">
		<Message Text="**********************************************************************************" />
		<Message Text="**********************************************************************************" />
		<Message Text="**********************************************************************************" />
		<Message Text=" CSS and JS not built due to the lack of a proper development environment" />
		<Message Text=" See https://material-blazor.com/docs/articles/DevelopmentEnvironment.html" />
		<Message Text="**********************************************************************************" />
		<Message Text="**********************************************************************************" />
		<Message Text="**********************************************************************************" />
	</Target>

	<Target Name="BuildScripts" Inputs="@(InputStaticAssetsScripts)" Outputs="@(OutputStaticAssetsScripts)" BeforeTargets="PreBuildEvent" AfterTargets="CheckIfNpmExists" Condition=" '$(NpmReturnCode)' == '0' ">
	<!--<Target Name="BuildScripts" BeforeTargets="PreBuildEvent" AfterTargets="CheckIfNpmExists" Condition=" '$(NpmReturnCode)' == '0' ">-->
		<RemoveDir Directories="$(ProjectDir)wwwroot/js" />

		<Message Importance="high" Text="***** npm install" />
		<Exec Command="npm install" />

		<Message Importance="high" Text="***** npm run build-scripts" />
		<Exec Command="npm run build-scripts" />

		<Message Importance="high" Text="***** npm run build-js" />
		<Exec Command="npm run build-js" />

		<Message Importance="high" Text="***** npm run build-min-js" />
		<Exec Command="npm run build-min-js" />

		<Message Importance="high" Text="***** delete *temp.js" />
		<ItemGroup>
			<FilesToDelete Include="wwwroot/js/*temp.js" />
		</ItemGroup>
		<Delete Files="@(FilesToDelete)" />
	</Target>

	<Target Name="BuildStyles" Inputs="@(InputStaticAssetsStyles)" Outputs="@(OutputStaticAssetsStyles)" BeforeTargets="PreBuildEvent" AfterTargets="CheckIfNpmExists" Condition=" '$(NpmReturnCode)' == '0' ">
		<RemoveDir Directories="$(ProjectDir)wwwroot/css" />

		<Message Importance="high" Text="***** npm install" />
		<Exec Command="npm install" />

		<Message Importance="high" Text="***** npm run build-theme" />
		<Exec Command="npm run build-theme" />

		<Message Importance="high" Text="***** npm run build-min-theme" />
		<Exec Command="npm run build-min-theme" />
	</Target>

	<PropertyGroup>
		<!--Paths to tools, tasks, and extensions are calculated relative to the BlazorWebAssemblySdkDirectoryRoot.
			But there does not seem to be a property for that, so after much trial and error, using the property 
			ILLinkTasksAssembly seems most reliable as it contains the same value whether the build is run from VS 
			or the command line, unlike many others such as MSBuildSDKsPath.
			If a better property is identified, this can be changed.			
		-->

		<!-- First, we strip the property value back to the root SDKs level and then down into the WebAssembly SDK -->
		<_SDKRoot>$(ILLinkTasksAssembly.Substring(0,$(ILLinkTasksAssembly.LastIndexOf('Microsoft.NET.ILLink.Tasks'))))</_SDKRoot>
		<BlazorWebAssemblySdkDirectoryRoot>$(_SDKRoot)\Microsoft.NET.Sdk.BlazorWebAssembly\</BlazorWebAssemblySdkDirectoryRoot>

		<!-- The next four lines are Copyright (c) .NET Foundation. All rights reserved. -->
		<_BlazorWebAssemblySdkTasksTFM Condition=" '$(MSBuildRuntimeType)' == 'Core'">net6.0</_BlazorWebAssemblySdkTasksTFM>
		<_BlazorWebAssemblySdkTasksTFM Condition=" '$(MSBuildRuntimeType)' != 'Core'">net472</_BlazorWebAssemblySdkTasksTFM>
		<_BlazorWebAssemblySdkTasksAssembly>$(BlazorWebAssemblySdkDirectoryRoot)tools\$(_BlazorWebAssemblySdkTasksTFM)\Microsoft.NET.Sdk.BlazorWebAssembly.Tasks.dll</_BlazorWebAssemblySdkTasksAssembly>
		<_BlazorWebAssemblySdkToolAssembly>$(BlazorWebAssemblySdkDirectoryRoot)tools\net6.0\Microsoft.NET.Sdk.BlazorWebAssembly.Tool.dll</_BlazorWebAssemblySdkToolAssembly>
	</PropertyGroup>

	<!-- The next two lines are Copyright (c) .NET Foundation. All rights reserved. -->
	<UsingTask TaskName="Microsoft.NET.Sdk.BlazorWebAssembly.BrotliCompress" AssemblyFile="$(_BlazorWebAssemblySdkTasksAssembly)" />
	<UsingTask TaskName="Microsoft.NET.Sdk.BlazorWebAssembly.GzipCompress" AssemblyFile="$(_BlazorWebAssemblySdkTasksAssembly)" />

	<!--
		Omitted to avoid CRIME and BREACH attacks - https://docs.microsoft.com/en-us/aspnet/core/performance/response-compression?view=aspnetcore-6.0#compression-with-https
		and secondarily no middleware presently serves precompressed assets
	-->
	<Target Name="CustomGZipAndBrotliCompression" AfterTargets="Build">

		<!--************* THIS IS WHERE YOU CHOOSE WHAT TO COMPRESS *****************
			you probably don't want to change anything else - just this ItemGroup-->

		<ItemGroup>
			<MyStaticFiles Include="$(ProjectDir)/wwwroot/**/*.css" />
			<MyStaticFiles Include="$(ProjectDir)/wwwroot/**/*.js" />
		</ItemGroup>

		<!--Call the BlazorWebAssembly Task GZipCompress and store the results in MyCompressedFiles-->
		<GZipCompress FilesToCompress="@(MyStaticFiles)" OutputDirectory="$(IntermediateOutputPath)compress\">
			<Output TaskParameter="CompressedFiles" ItemName="MyCompressedFiles" />
		</GZipCompress>

		<!--Call the BlazorWebAssembly Task BrotliCompress and store the results in MyCompressedFiles-->
		<BrotliCompress OutputDirectory="$(IntermediateOutputPath)compress\" FilesToCompress="@(MyStaticFiles)" ToolAssembly="$(_BlazorWebAssemblySdkToolAssembly)" ToolExe="$(_RazorSdkDotNetHostFileName)" ToolPath="$(_RazorSdkDotNetHostDirectory)">
			<Output TaskParameter="CompressedFiles" ItemName="MyCompressedFiles" />
		</BrotliCompress>

		<!--Log out what we have done-->
		<Message Importance="High" Text="======= Brotli/GZip Compression For @(MyCompressedFiles-&gt;Count()) Static Files =======" />
		<Message Importance="High" Text=" Compressed: %(MyCompressedFiles.OriginalItemSpec)%(MyCompressedFiles.Extension)" />

		<!--Rename/move the compressed files back to to the correct place/names as they have "hashed" names at this stage.-->
		<Move SourceFiles="%(MyCompressedFiles.FullPath)" DestinationFiles="%(MyCompressedFiles.OriginalItemSpec)%(MyCompressedFiles.Extension)" />

	</Target>

	<!-- Remove comments to list wwwroot contents to diagnose content inclusion in GitHub Actions -->
	<!--<Target Name="Tests" AfterTargets="CustomGZipAndBrotliCompression">

		<Message Importance="High" Text="===========================================================================" />
		<Message Importance="High" Text="===========================================================================" />
		<Message Importance="High" Text="===========================================================================" />
		<Message Importance="High" Text="====== List contents of wwwroot ===========================================" />
		<Message Importance="High" Text="" />
		<Exec Command="ls -altR $(ProjectDir)wwwroot" ContinueOnError="true" StandardOutputImportance="high" StandardErrorImportance="high" LogStandardErrorAsError="false" IgnoreExitCode="true" />
		<Message Importance="High" Text="===========================================================================" />
		<Message Importance="High" Text="===========================================================================" />
		<Message Importance="High" Text="===========================================================================" />

	</Target>-->

</Project>
