name: GithubActionsRelease

on:
  push:
    tags:
      - '*' # Push events to matching *, i.e. 1.0, 20.15.10



env:
  blazorServerAppName: 'website-2203-blazor-server'
  blazorWebAssemblyAppName: 'website-2203-blazor-webassembly'
  registryName: 'dioptraregistry'
  registryLocation: 'uk south'
  blazorServerDockerFile: './Website.Server/Dockerfile-Server'
  blazorWebAssemblyDockerFile: './Website.Server/Dockerfile-WebAssembly'



jobs:

############################################################################################################
# These jobs are used to gate actions. By creating these jobs we don't need to proliferate the repo checks
############################################################################################################
  is-on-dioptra:
    name: Running on Dioptra/Website.2203?
    runs-on: ubuntu-latest
    if: github.repository == 'Dioptra/Website.2203'
    steps:
    - name: Nothing to see here
      run: echo ""



############################################################################################################
# Store the version information
############################################################################################################
  version:
    name: Set version suffix
    runs-on: ubuntu-latest

    steps:
    - id: get
      run: |
        echo "::set-output name=tag::${GITHUB_REF/refs\/tags\//}"
        echo "::set-output name=suffix::$(date +'%Y-%m-%d--%H-%M-%S')--${GITHUB_REF/refs\/tags\//}"
    - id: show
      run: |
        echo "Tag:        ${{ steps.get.outputs.tag }}"
        echo "Suffix:     ${{ steps.get.outputs.suffix }}"
    outputs:
      tag: ${{ steps.get.outputs.tag }}
      suffix: ${{ steps.get.outputs.suffix }}
      
      

############################################################################################################
# Build blazor server container on Dioptra
############################################################################################################
  build-dioptra-website-SSB:
    name: Build SSB docker container
    needs: [version, perform-deployment]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository under $GITHUB_WORKSPACE so the job can access it 🛎️
      uses: actions/checkout@v3
      with:
        persist-credentials: false

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v2

    - name: 'Build and push docker container'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    #- run: |
    #    dotnet workload install wasm-tools
    #    dotnet publish ${{env.project}} --os linux --arch x64 --configuration Release_Server -p:PublishProfile=DefaultContainer -p:Version=${{ needs.version.outputs.suffix }} -p:ContainerImageName=${{env.blazorServerAppName}}
    #    docker tag ${{env.blazorServerAppName}}:${{ needs.version.outputs.suffix }} ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{env.blazorServerAppName}}:${{ needs.version.outputs.suffix }}
    #    docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{env.blazorServerAppName}}:${{ needs.version.outputs.suffix }}

    - run: |
        docker build . --file ${{ env.blazorServerDockerFile }} --tag ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.blazorServerAppName }}:${{ needs.version.outputs.suffix }} --build-arg version=${{ needs.version.outputs.suffix }}
        docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.blazorServerAppName }}:${{ needs.version.outputs.suffix }}
        

############################################################################################################
# Build blazor webassembly container on Dioptra
############################################################################################################
  build-dioptra-website-CSB:
    name: Build CSB docker container
    needs: [version, perform-deployment]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository under $GITHUB_WORKSPACE so the job can access it 🛎️
      uses: actions/checkout@v3
      with:
        persist-credentials: false

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v2

    - name: 'Build and push docker container'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    #- run: |
    #    dotnet workload install wasm-tools
    #    dotnet publish ${{env.project}} --os linux --arch x64 --configuration Release_Server -p:PublishProfile=DefaultContainer -p:Version=${{ needs.version.outputs.suffix }} -p:ContainerImageName=${{env.blazorWebAssemblyAppName}}
    #    docker tag ${{env.blazorWebAssemblyAppName}}:${{ needs.version.outputs.suffix }} ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{env.blazorWebAssemblyAppName}}:${{ needs.version.outputs.suffix }}
    #    docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{env.blazorWebAssemblyAppName}}:${{ needs.version.outputs.suffix }}

    - run: |
        docker build . --file ${{ env.blazorWebAssemblyDockerFile }} --tag ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.blazorWebAssemblyAppName }}:${{ needs.version.outputs.suffix }} --build-arg version=${{ needs.version.outputs.suffix }}
        docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.blazorWebAssemblyAppName }}:${{ needs.version.outputs.suffix }}



############################################################################################################
# Create release
############################################################################################################
  create-release:
    name: Create release
    needs: [version, build-blazor-server, build-blazor-webassembly, is-on-dioptra]

    runs-on: ubuntu-latest

    steps:
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.version.outputs.tag }}
        release_name: Release ${{ needs.version.outputs.tag }}
        draft: false
        prerelease: false

