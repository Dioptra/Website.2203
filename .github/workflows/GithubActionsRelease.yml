name: GithubActionsRelease

on:
  push:
    tags:
      - '*' # Push events to matching *, i.e. 1.0, 20.15.10



env:
  blazorServerDockerFile: './Website.BlazorServer/Dockerfile'
  blazorServerAppName: 'website-2203-blazor-server'
  blazorWebAssemblyDockerFile: './Website.BlazorWebAssembly/Server/Dockerfile'
  blazorWebAssemblyAppName: 'website-2203-blazor-webassembly'
  registryName: 'dioptraregistry'
  registryLocation: 'uk south'



jobs:

############################################################################################################
# These jobs are used to gate actions. By creating these jobs we don't need to proliferate the repo checks
############################################################################################################
  is-on-dioptra:
    name: Running on Dioptra/Website.2203?
    runs-on: ubuntu-latest
    if: github.repository == 'Dioptra/Website.2203'
    steps:
    - name: Nothing to see here
      run: echo ""



############################################################################################################
# Store the version information
############################################################################################################
  version:
    name: Set version suffix
    runs-on: ubuntu-latest

    steps:
    - id: get
      run: |
        echo "::set-output name=suffix::$(date +'%Y-%m-%d--%H-%M-%S')--${GITHUB_REF/refs\/tags\//}"
    - id: show
      run: |
        echo "Suffix:     ${{ steps.get.outputs.suffix }}"
    outputs:
      suffix: ${{ steps.get.outputs.suffix }}
      
      

############################################################################################################
# Build blazor server container
############################################################################################################
  build-blazor-server:
    name: Build Website.BlazorServer docker container
    needs: [version, is-on-dioptra]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository under $GITHUB_WORKSPACE so the job can access it 🛎️
      uses: actions/checkout@v2
      with:
        persist-credentials: false

    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: 'Build and push docker container'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    - run: |
        docker build . --file ${{ env.blazorServerDockerFile }} --tag ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.blazorServerAppName }}:${{ needs.version.outputs.suffix }} --build-arg version=${{ needs.version.outputs.suffix }}
        docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.blazorServerAppName }}:${{ needs.version.outputs.suffix }}

    - name: 'Deploy to Azure Container Instances'
      uses: 'azure/aci-deploy@v1'
      with:
        resource-group: ${{ secrets.RESOURCE_GROUP }}
        dns-name-label: ${{ secrets.RESOURCE_GROUP }}${{ github.run_number }}
        image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.blazorServerAppName }}:${{ needs.version.outputs.suffix }}
        registry-login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        registry-username: ${{ secrets.REGISTRY_USERNAME }}
        registry-password: ${{ secrets.REGISTRY_PASSWORD }}
        name: ${{ env.registryName }}
        location: ${{ env.registryLocation }}      
   
        

############################################################################################################
# Build blazor webassembly container
############################################################################################################
  build-blazor-webassembly:
    name: Build Website.BlazorWebAssembly docker container
    needs: [version, is-on-dioptra]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository under $GITHUB_WORKSPACE so the job can access it 🛎️
      uses: actions/checkout@v2
      with:
        persist-credentials: false

    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: 'Build and push docker container'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    - run: |
        docker build . --file ${{ env.blazorWebAssemblyDockerFile }} --tag ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.blazorWebAssemblyAppName }}:${{ needs.version.outputs.suffix }} --build-arg version=${{ needs.version.outputs.suffix }}
        docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.blazorWebAssemblyAppName }}:${{ needs.version.outputs.suffix }}

    - name: 'Deploy to Azure Container Instances'
      uses: 'azure/aci-deploy@v1'
      with:
        resource-group: ${{ secrets.RESOURCE_GROUP }}
        dns-name-label: ${{ secrets.RESOURCE_GROUP }}${{ github.run_number }}
        image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.blazorWebAssemblyAppName }}:${{ needs.version.outputs.suffix }}
        registry-login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        registry-username: ${{ secrets.REGISTRY_USERNAME }}
        registry-password: ${{ secrets.REGISTRY_PASSWORD }}
        name: ${{ env.registryName }}
        location: ${{ env.registryLocation }}



############################################################################################################
# Create release
############################################################################################################
  #create-release:
  #  name: Create release
  #  needs: [build-blazor-server, build-blazor-webassembly, is-on-dioptra]

  #  runs-on: ubuntu-latest

  #  steps:
  #  - name: Create Release
  #    if: needs.branch.outputs.identifier != 'experimental-release-workflow' # this check is important to allow testing this workflow on a non-main branch without deploying to nuget: this critical action is not performed when not on main.
  #    uses: actions/create-release@v1
  #    env:
  #      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #    with:
  #      tag_name: ${{needs.version.outputs.identifier}}
  #      release_name: Release ${{needs.version.outputs.identifier}}
  #      draft: false
  #      prerelease: false
